package Auora.model.player;

import Auora.rscache.ItemDefinitions;

import java.io.BufferedReader;
import java.io.FileReader;

/**
 * Item Prices
 *
 * @author Jonathan spawnscape
 */
public class Prices {

    public static int unlosableItems[] = {13263, 15492, 8839, 8840, 8842, 11663, 11664, 11665, 10548, 10551, 6570, 16755, 17237, 16865, 16931, 16195, 17017, 18344, 18839, 17273,
            16711, 17259, 16689, 16293, 17361, 16359, 16403, 16425, 16955,
            16909, 4447, 1037, 13536, 13532, 13531, 13535, 13534, 13533};

    public static String[] global_unspawnable_items = {"dragonfire", "(i)", "abyssal tentacle", "void", "voting hat", "castle wars", "lamp", "torso", "pharaohs sceptre", " 100", " 75",
            " 50", " 25", "(deg)", " 0", "corrupt", "eye of the", "grain", "bunny ear", "token", "druidic", "3rd age", "nugget", "coin", "partyhat", "santa hat", "h'ween", "sled", "scythe", "mystery box",
            "clue scroll", "casket", "random event", "primal", "celestial", "sagittarian", "third-age", "robin hood hat", "infinity", "stone of power", "flameburst", "abyssal vine whip", "teleport", "dice", "scroll"};

    public static int[] global_unspawnable_item_ids = {14893, 14894, 14895, 14896, 14897, 14899, 14900, 14901, 14902, 14903, 14904, 14905, 14906, 14907, 14908, 14909, 14910, 13911, 13917, 13923, 13929, 13908, 13914, 13920, 13926, 13932, 13935, 13938, 13941, 13944, 13497, 13950, 13952, 13912, 13918, 13924, 13930, 13909, 13915, 13921, 13927, 13933, 13936, 13939, 13942, 13945, 13948, 13951, 13953, 12530, 10666, 10664, 10665, 10667, 10668, 12680, 4202, 987, 989, 985, 986, 13467, 15704, 15703, 15702, 15701, 8841, 14486, 13450, 10611, 11663, 11664, 11665, 18349, 18351, 18353, 18355,
            18357, 6570, 15084, 15085, 989, 990, 981, 982, 18360, 6859, 6858, 18359, 15491, 6543, 18361, 9470, 9471,
            6857, 9816, 6856, 9815, 6860, 6861, 1962, 15509, 15510, 744, 745, 7498, 5607, 11105, 11106, 11107, 11108, 11109,
            11110, 11111, 11112, 11114, 14796, 14808, 15360, 18336, 18343, 7629, 18344, 18839, 17172, 17237, 17238, 8344, 8636, 8637,
            15796, 15807, 15847, 15902, 16173, 16195, 16755, 16756, 16865, 16866, 16931, 16932, 17017, 17018, 17171, 13598, 13612,
            13613, 13614, 13615, 13616, 13617, 13618, 13619, 13620, 13621, 13622, 13624, 13625, 13626, 13628, 13629, 13627, 13656,
            13657, 13658, 8851, 3706, 4278, 4691, 6183, 11723, 11721, 10025, 7774, 7775, 7776, 12852, 13650, 13651, 13652, 13653, 13654, 14740, 15346, 15348,
            15350, 15351, 15389, 15390, 18782, 18783, 18808, 19750, 11753, 11754, 11755, 12627, 12628, 13227, 13439, 13446, 13448, 13463,
            14574, 14576, 14580, 14581, 14582, 14633, 14634, 14635, 14711, 4447, 4522, 4523, 4524, 4525, 4526, 6453, 6796, 7498, 10586,
            10889, 10893, 11137, 11139, 11141, 11157, 11185, 11186, 11187, 11188, 11189, 11679, 7774, 7775, 7776, 9474, 10934, 10935, 10936,
            10942, 10943, 10944, 2528, 15259, 17291, 17292, 7936, 7937, 1436, 1437, 4489, 19672, 19673, 19674, 13405, 405, 406, 2949, 15488,
            15490, 12863, 12864, 12865, 18363, 14664, 6199, 1959, 1961, 17017, 17018, 13538, 13539, 13540, 6862, 18016, 15262, 10733, 4079,
            15099, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 4083, 18348, 4067, 18346, 10842, 7927, 10729, 12844, 4067,
            18580, 18581, 18582, 18583, 13677, 13678, 13679, 13680, 13681, 13682, 13683, 13684, 1763, 1764, 1771, 1772, 1765, 1766, 1767, 1768,
            11808, 15441, 15442, 15443, 15444, 15816, 16971, 16972, 17357, 17358, 16032, 16399, 16400, 16963, 16964, 16043, 16951,
            16952, 16959, 16960, 16182, 16421, 16422, 16965, 16966, 8898, 8899, 8890, 995, 1004, 7806, 4178, 7142, 11604, 11603, 13907,
            8871, 10734, 13906, 18350, 18352, 18354, 18356, 18358, 18360, 18362, 18364, 14661, 1003, 1002, 1001, 1000, 999, 998, 997,
            996, 15349, 15347, 15345, 19710, 19709, 10566, 10637, 962, 963, 10735, 4079, 10733, 14595, 15333, 15334, 15335, 15301, 15302, 15303,
            14600, 14601, 14602, 14603, 14604, 14605, 13263, 14636, 14637, 15492, 15496, 15497, 10664, 11283, 11667,
            17035, 17036, 16691, 16692, 16693, 16694, 16695, 16696, 10696, 4565, 4566, 16353, 15088, 18363, 18364, 15262, 4278, 4279,
            8839, 8840, 8842, 11663, 11664, 11665, 13263, 15488, 15490,
            6570, 8850, 17273, 10548, 10551, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 16755, 17237, 16865, 16931, 16195, 17017, 18344, 18839, 17273,
            16711, 17259, 16689, 16293, 17361, 16359, 16403, 16425, 16955, 16909, 4447, 1037, 13536, 13532, 13531, 13535, 13534, 13533,
            11724, 11725, 11726, 11727, 11694, 11695, 11696, 11697, 11698, 11699, 11700, 11701, 14484, 14485, 18786, 11718, 11720, 11722, 11724, 11726, 11694, 11696, 11698, 11700,
            14484, 18786, 15220, 15017, 15018, 15019, 15020, 13738, 13744, 18349, 18351, 18353, 18355, 18357, 18359, 18363, 18361, 18335,
            19669,
            4708, 4709, 4716, 4717, 4724, 4725, 4732, 4733, 4745, 4746, 4753, 4754, 11848, 11849, 11846, 11847, 11850, 11851, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322,
            4323, 4324, 4325, 4226, 4327, 4328, 4329, 4330, 4331, 4332,
            4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 13887, 13888, 13893, 13894, 13896, 13897, 13884, 13885, 13890, 13891, 13899, 13900, 13902, 13903, 13905, 13906, 17273, 17274,
            13864, 13865, 13858, 13859, 13861, 13862, 13867, 13868, 13876, 13877, 13870, 13871, 13873, 13874, 13883, 13884, 13879, 13880,
            15300, 15301, 15331, 15332, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 19709, 19710, 14893, 14894, 12853, 12854,
            4712, 4713, 4720, 4721, 4728, 4729, 4736, 4737, 4749, 4750, 4757, 4758, 11852, 11853, 11854, 11855, 11856, 11857, 4714, 4715, 4722, 4723, 4730, 4731, 4738, 4739, 4751, 4752, 4759, 4760, 4740, 4741, 4763, 12852, 12853,
            4710, 4711, 4718, 4719, 4726, 4727, 4734, 4735, 4747, 4748, 4755, 4756,
            4151, 11732, 15486, 6914, 6889,
            2577, 15241, 6920, 6585, 15126, 11235, 6735, 6737, 6733, 6731, 14892, 14891, 14890, 14889, 14888, 14887, 14886, 14885, 14884,
            14883, 14882, 14881, 14880, 12852, 9747, 9750, 9753, 9756, 9759, 9762, 9765, 9768, 9771,
            9774, 9777, 9780, 9783, 9786, 9789, 9792, 9795, 9798, 9801, 9804, 9807, 9810};

    public static int mulAndCheck(int x, int y) {
        long m = ((long) x) * ((long) y);


        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
            throw new ArithmeticException("overflow: mul");
        }
        return (int) m;
    }

    public static int getPrice(Player p, int itemId) {
        if (p.getDonatorRights().ordinal() == 3) {
            if (itemId == 15098) {
                return 0;
            }
        }
        try (BufferedReader buf = new BufferedReader(new FileReader("./Data/shop_prices.txt"))) {
            String line;
            while ((line = buf.readLine()) != null) {
                String[] regex = line.split(",");
                if (line.startsWith(String.valueOf("ItemID: " + itemId + ","))) {
                    int itemValue = Integer.valueOf(regex[1].replace(" Value: ", ""));
                    return itemValue;
                }
            }
            buf.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            return 0;
        }
        return 0;
    }

    public static int getPrice(int itemId) {
        try (BufferedReader buf = new BufferedReader(new FileReader("./Data/shop_prices.txt"))) {
            String line;
            while ((line = buf.readLine()) != null) {
                String[] regex = line.split(",");
                if (line.startsWith(String.valueOf("ItemID: " + itemId + ","))) {
                    int itemValue = Integer.valueOf(regex[1].replace(" Value: ", ""));
                    return itemValue;
                }
            }
            buf.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    public static boolean losable(int itemID) {
        if (itemID == 4204 || itemID == 7142 || itemID == 14486 || itemID == 13450 || itemID == 19710) {
            return false;
        }
        for (int i = 0; i < unlosableItems.length; i++)
            if (unlosableItems[i] == itemID)
                return false;
        if (itemID == 995) {
            return true;
        }
        return true;
    }

    public static boolean unspawnable_item(Player p, int item_id) {
        if (p.getStaffRights() == StaffRights.OWNER || p.getStaffRights() == StaffRights.ADMINISTRATOR || p.getStaffRights() == StaffRights.GLOBAL_ADMIN ||
                p.getStaffRights() == StaffRights.COMMUNITY_MANAGER || p.getStaffRights() == StaffRights.STAFF_MANAGER || p.getStaffRights() == StaffRights.DEVELOPER) {
            return true;
        }
        for (int i = 0; i < global_unspawnable_items.length; i++) {
            if (ItemDefinitions.forID(item_id).name.toLowerCase().contains(global_unspawnable_items[i])) {
                return false;
            }
        }
        for (int i = 0; i < global_unspawnable_item_ids.length; i++) {
            if (item_id == global_unspawnable_item_ids[i]) {
                return false;
            }
        }
        if (p.getDonatorRights().ordinal() == 3) {
            if (item_id == 15098) {
                return false;
            }
        }
        int item = item_id;
        return !(item >= 13405 && item <= 13558 || item >= 13763 && item <= 13839 || item == 14486 || item == 15502 || item == 19310 || item == 19313 || item == 19316 || item == 19319 || item == 19322);
    }

}
