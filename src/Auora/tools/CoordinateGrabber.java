package Auora.tools;

import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Stephen
 */
public class CoordinateGrabber extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    public ArrayList<GeneratedCoord> generatedCoords = new ArrayList<GeneratedCoord>();
    public ArrayList<GeneratedArea> generatedAreas = new ArrayList<GeneratedArea>();
    public javax.swing.JEditorPane outputPane;
    public javax.swing.JScrollPane outputScroll;
    public javax.swing.JScrollPane worldMapScroll;
    private Object[] faceDirOptions = new Object[]{"0:North", "1:Northeast", "2:East", "3:Southeast", "4:South", "5:Southwest", "6:West", "7:Northwest"};
    private Object[] walkOptions = new Object[]{"Yes", "No"};
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane godWarsMapScroller;
    private javax.swing.JPanel godWarsPanel;
    private javax.swing.JTabbedPane mapsTabs;
    private javax.swing.JPanel worldMapPanel;
    /**
     * Creates new form NSFrame
     */
    public CoordinateGrabber() {
        try {
            JPopupMenu.setDefaultLightWeightPopupEnabled(false);
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            initComponents();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CoordinateGrabber.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CoordinateGrabber.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(CoordinateGrabber.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CoordinateGrabber.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CoordinateGrabber().setVisible(true);
            }
        });
    }

    private void writeWalkSpawn(int npcId, int height, int direction, GeneratedArea area) {
        /*try {
        //BufferedWriter bw = new BufferedWriter(new FileWriter("./Data/npcs/npcspawns.txt", true));
        } catch (IOException ex) {
        Logger.getLogger(NSFrame.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }

    private void writeStationarySpawn(int npcId, int height, int direction, boolean doesWalk, GeneratedCoord generatedCoord) {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("./Data/npcs/npcspawns.txt", true));
            bw.newLine();
            bw.write("" + npcId + " " + generatedCoord.getX() + " " + generatedCoord.getY() + " " + height + " " + direction + " " + doesWalk + "");
            bw.flush();
            bw.close();
            ((HTMLEditorKit) outputPane.getEditorKit()).insertHTML((HTMLDocument) outputPane.getDocument(), ((HTMLDocument) outputPane.getDocument()).getLength(), "Spawn created succsefully!", 0, 0, null);
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outputScroll = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JEditorPane();
        mapsTabs = new javax.swing.JTabbedPane();
        worldMapScroll = new javax.swing.JScrollPane();
        worldMapPanel = new Auora.tools.WorldMapPanel(this);
        godWarsMapScroller = new javax.swing.JScrollPane();
        godWarsPanel = new GodwarsMapPanel(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dementhium Coordinate Grabber");
        setIconImage(new javax.swing.ImageIcon("./data/tools/icon.png").getImage());

        outputPane.setDocument(new HTMLDocument());
        outputPane.setEditable(false);
        outputPane.setEditorKit(new HTMLEditorKit());
        outputPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                outputPaneHyperlinkUpdate(evt);
            }
        });
        outputScroll.setViewportView(outputPane);

        worldMapScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        worldMapScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        worldMapScroll.setFocusable(false);
        worldMapScroll.setOpaque(false);

        worldMapPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        worldMapPanel.setDoubleBuffered(false);
        worldMapPanel.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout worldMapPanelLayout = new javax.swing.GroupLayout(worldMapPanel);
        worldMapPanel.setLayout(worldMapPanelLayout);
        worldMapPanelLayout.setHorizontalGroup(
                worldMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 594, Short.MAX_VALUE)
        );
        worldMapPanelLayout.setVerticalGroup(
                worldMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 411, Short.MAX_VALUE)
        );

        worldMapScroll.setViewportView(worldMapPanel);

        mapsTabs.addTab("World Map", worldMapScroll);

        javax.swing.GroupLayout godWarsPanelLayout = new javax.swing.GroupLayout(godWarsPanel);
        godWarsPanel.setLayout(godWarsPanelLayout);
        godWarsPanelLayout.setHorizontalGroup(
                godWarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 611, Short.MAX_VALUE)
        );
        godWarsPanelLayout.setVerticalGroup(
                godWarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 428, Short.MAX_VALUE)
        );

        godWarsMapScroller.setViewportView(godWarsPanel);

        mapsTabs.addTab("Godwars Map", godWarsMapScroller);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(outputScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                                        .addComponent(mapsTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 618, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mapsTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 458, Short.MAX_VALUE)
                                .addGap(12, 12, 12)
                                .addComponent(outputScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_outputPaneHyperlinkUpdate
        if (evt.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
            int npcId;
            try {
                npcId = Integer.parseInt(JOptionPane.showInputDialog("Please enter the NPC ID for this spawn."));
            } catch (NumberFormatException ex) {
                npcId = 0;
            }
            int height;
            try {
                height = Integer.parseInt(JOptionPane.showInputDialog("Please enter the height for this spawn."));
            } catch (NumberFormatException ex) {
                height = 0;
            }
            int faceDir;
            try {
                faceDir = Integer.parseInt(((String) JOptionPane.showInputDialog(this, "Choose the npc's face direction", "Face Direction", JOptionPane.QUESTION_MESSAGE, null, faceDirOptions, faceDirOptions[0])).substring(0, 1));
            } catch (NumberFormatException ex) {
                faceDir = 0;
            }
            int doesWalk;
            try {
                doesWalk = JOptionPane.showOptionDialog(this, "Do you want this npc to walk around?", "Walking", JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, walkOptions, walkOptions[0]);
            } catch (NumberFormatException ex) {
                doesWalk = 0;
            }
            String type = evt.getDescription().split(":")[0];
            if (type.equals("area")) {
                writeWalkSpawn(npcId, height, faceDir, generatedAreas.get(Integer.parseInt(evt.getDescription().split(":")[1])));
            } else if (type.equals("coord")) {
                writeStationarySpawn(npcId, height, faceDir, doesWalk == 0 ? true : false, generatedCoords.get(Integer.parseInt(evt.getDescription().split(":")[1])));
            }
        }
    }//GEN-LAST:event_outputPaneHyperlinkUpdate
    // End of variables declaration//GEN-END:variables

    public static class GeneratedCoord {

        private final int x;
        private final int y;

        public GeneratedCoord(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }
    }

    public static class GeneratedArea {

        private final int swX;
        private final int swY;
        private final int nwX;
        private final int nwY;

        public GeneratedArea(int swX, int swY, int nwX, int nwY) {
            this.swX = swX;
            this.swY = swY;
            this.nwX = nwX;
            this.nwY = nwY;
        }

        public int getNwX() {
            return nwX;
        }

        public int getNwY() {
            return nwY;
        }

        public int getSeX() {
            return swX;
        }

        public int getSeY() {
            return swY;
        }
    }

}
